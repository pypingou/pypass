#!/usr/bin/python
#-*- coding: utf-8 -*-

# Copyright (c) 2011 Pierre-Yves Chibon <pingou AT pingoured DOT fr>
# Copyright (c) 2011 Johan Cwiklinski <johan AT x-tnd DOT be>
#
# This file is part of pypass.
#
# pypass is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# pypass is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with pypass.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import cmd
import getpass
import gettext
import sys
from warnings import warn

try:
    # Application is already installed
    from pypass import pyp
    from pypass import __version__, __application__
    from pypass import __description__, __locale_dir__
    from pypass.pypobj import PypFolder, PypAccount
except ImportError:
    # Application isn't installed
    sys.path.insert(0, '..')
    from pypass import pyp
    from pypass import __version__, __application__
    from pypass import __description__, __locale_dir__
    from pypass.pypobj import PypFolder, PypAccount

TKIMPORT = True
try:
    from Tkinter import Tk
except ImportError:
    TKIMPORT = False

gettext.install(__application__, __locale_dir__)

def view_folder(folder, level):
    """ Print the content of the given folder. """
    if len(folder.accounts) > 0:
        for account in folder.accounts:
            print '  | ' * level + '\_', account.name

    if len(folder.folders) > 0:
        for folder in folder.folders:
            print '  | ' * level + '\_ *' + folder.name
            view_folder(folder, level = level + 1)



class PyPassInteractive(cmd.Cmd):

    def __init__(self, pyp, filename=None):
        cmd.Cmd.__init__(self)
        self.pyp = pyp
        self.filename = filename
        self.pyp.load_data(filename=self.filename)
        self.pyp_main_folder = self.pyp.json_to_tree()
        self.intro = 'See `help` for a list of the command available.'
        self.folder = self.pyp_main_folder
        self.path = "/"
        self.modified = False
        if not TKIMPORT:
            warn('The copy command from the interactive shell will not be available. '\
        'Install the Tkinter library to have it.')

    def complete_cat(self, text, line, start_index, end_index):
        options = [account.name for account in self.folder.accounts]
        return options

    def complete_cd(self, text, line, start_index, end_index):
        options = [folder.name for folder in self.folder.folders]
        return options

    def complete_cmd(self, text, line, start_index, end_index):
        commands = ['add', 'add_folder', 'cat', 'cd', 'exit', 'ls', 'pwd',
            'quit', 'remove', 'save', 'view']
        return commands
    
    def complete_view(self, text, line, start_index, end_index):
        options = [account.name for account in self.folder.accounts]
        return options

    def do_add(self, params):
        """ Add a password in the database. """
        print 'Adding a password into the folder: %s' % self.path
        name = params
        if not name:
            name = raw_input('Name: ')
        password = getpass.getpass('Password: ')
        account = PypAccount(name, password)
        add_extras = raw_input( 'Do you want to add extra-information? [Y/N] ')
        while add_extras.lower().startswith('y'):
            key = raw_input('Title: ')
            value = raw_input('Value: ')
            account.extras[key] = value
            add_extras = raw_input( 'Do you want to add extra-information? [Y/N] ')
        self.folder.accounts.append(account)
        self.modified = True

    def do_add_folder(self, params):
        """ Add a folder in the current directory. """
        name = params
        if not name:
            name = raw_input('Name: ')
        desc = raw_input('Description: ')
        folder = PypFolder(name, desc)
        self.folder.folders.append(folder)
        self.modified = True

    def do_cat(self, params):
        """ Display the information relative to a given password. """
        self.do_view(params)

    def do_cd(self, params=None):
        """ Change the working directory. """
        if not params or params == '/':
            self.folder = self.pyp_main_folder
            self.path = '/'
            return
        if params == '..':
            path = self.path.split('/')
            self.folder = self.pyp_main_folder
            self.path = '/'
            for folder in path[1:-2]:
                self.do_cd(folder)
            return
        found = False
        for folder in self.folder.folders:
            if params == folder.name:
                self.folder = folder
                self.path = self.path + folder.name + '/'
                found = True
        if not found:
            print 'No folder of the name "%s" were found in this folder.' % params

    def do_copy(self, params):
        """ Copy the password of the given account to the clipboard. """
        if not TKIMPORT:
            print 'Command not available.'
            return
        if not params:
            print 'No password specified'
        else:
            found = False
            for account in self.folder.accounts:
                if account.name == params:
                    r = Tk()
                    r.withdraw()
                    r.clipboard_clear()
                    r.clipboard_append(account.password)
                    print 'Password for the account %s copied to clipboard' % account.name
                    found = True
            if not found:
                print 'No password of the name "%s" were found in this folder.' % params

    def do_exit(self, params):
        """ Quit the program. """
        self.do_quit(params)

    def do_ls(self, params):
        """ List directory and password available in the current
        directory.
        """
        if not params:
            self.view_folder(self.folder)
        else:
            for folder in self.folder.folders:
                if params == folder.name:
                    self.view_folder(folder)

    def do_pwd(self, params):
        """ Print the working directory. """
        print self.path

    def do_tree(self, params=None):
        """ Show the tree. """
        print '(Folder have a *)'
        print '*root'
        view_folder(self.folder, 1)

    def do_quit(self, params):
        """ Quit the program. """
        if self.modified:
            print 'The database has been modified.'
            usr_inp = raw_input('Do you want to quit (q), save (s), cancel (c)? ')
            if usr_inp.lower() == 'c':
                return
            elif usr_inp.lower() == 's':
                self.do_save(None)
        sys.exit(1)

    def do_remove(self, params):
        """ Remove a password from the database.
        """
        if not params:
            print 'Please specify the password or folder to remove.'
        else:
            for folder in self.folder.folders:
                if params == folder.name:
                    usr_inp = raw_input('Are you sure you want to remove the folder "%s"? [Y/N] ' %
                        params)
                    if usr_inp.lower().startswith('y'):
                        self.folder.folders.remove(folder)
                        self.modified = True
            for account in self.folder.accounts:
                if params == account.name:
                    usr_inp = raw_input('Are you sure you want to remove the account "%s"? [Y/N] ' %
                        params)
                    if usr_inp.lower().startswith('y'):
                        self.folder.accounts.remove(account)
                        self.modified = True

    def do_save(self, params):
        """ Save the current database.
    :arg filename to which the database will be saved, if not specified
        it will save the current file or will take it the default from
        the configuration file."""
        self.pyp.data = self.pyp_main_folder.dump()
        if not params and not self.filename:
            print 'Please specify a filename to which save the database.'
        elif self.filename and not params:
            outcome = self.pyp.crypt(filename = self.filename, force=True)
            if outcome is False:
                print 'Could not save the database, Wrong/Expired key?'
            elif outcome == 'key_not_found':
                print 'No key specified in the configuration file.'
            elif outcome == 'file_exists':
                print 'This database file already exists.'
            else:
                self.modified = False
        elif params:
            outcome = self.pyp.crypt(filename = params)
            if outcome is False:
                print 'Could not save the database, Wrong/Expired key?'
            elif outcome == 'key_not_found':
                print 'No key specified in the configuration file.'
            elif outcome == 'file_exists':
                print 'This database file already exists.'
                usr_inp = raw_input( 'To you want to over write this file? [Y/N]')
                if usr_inp.lower().startswith('y'):
                    self.pyp.crypt(filename = params, force=True)
                    self.modified = False
            else:
                self.modified = False

    def do_view(self, params):
        """ Display the information relative to a given password. """
        if not params:
            print 'No password specified'
        else:
            found = False
            for account in self.folder.accounts:
                if account.name == params:
                    print account
                    found = True
            if not found:
                print 'No password of the name "%s" were found in this folder.' % params

    def view_folder(self, folder):
        """ Display the content of a folder. """
        if len(folder.folders) > 0:
            print _("Folders:")
            for fold in folder.folders:
                print "  " + fold.name

        if len(folder.accounts) > 0:
            print _("Accounts:")
            for account in folder.accounts:
                print '  %s' % account.name


class PyPassCli(object):

    def __init__(self, pypass):
        self.pyp = pypass
        self.parseArgs()

    def parseArgs(self):
        """Parse command line arguments."""
        parser = argparse.ArgumentParser(description=__description__,
                                         version="%(name)s %(version)s" %
                              {'name': __application__,
                               'version': __version__})

        group = parser.add_argument_group(_('Common options'))
        group.add_argument('-f',
                           '--file',
                           dest='filename',
                           help=_('The accounts database file, this override '\
                                  'the default value'))
        group.add_argument('-V',
                           '--verbose',
                           dest='verbose',
                           help=_('Be a bit more verbose.'),
                           action='store_true',
                           default=False)
        group.add_argument('-D',
                           '--debug',
                           dest='debug',
                           help=_('Activate debug mode (show executed '\
                                  'commands, etc.).'),
                           action='store_true',
                           default=False)

        exclusive_query_group = parser.add_mutually_exclusive_group(required = True)
        exclusive_query_group.add_argument('-l',
                                 '--list',
                                 help=_('List folders'),
                                 nargs='?',
                                 default='')
        exclusive_query_group.add_argument('-g',
                                 '--get',
                                 help=_('Retrieve an account by its ID'),
                                 action='store',
                                 nargs='+',
                                 default=False)

        exclusive_query_group.add_argument('-i',
                                   '--interactive',
                                   help=_('Enter PyPass interactive mode'),
                                   action='store_true',
                                   default=False)

        args = parser.parse_args()

        if args.debug:
            #TODO: init a debug mode
            pass
        if args.verbose:
            #TODO: init a verbose mode
            pass

        if not args.filename:
            args.filename = None

        #List mode
        if args.list != '':
            #TODO: the --list option should show the entire tree, interactive
            #mode should be used to be more concise.
            self.pyp.load_data(filename=args.filename)
            if self.pyp.data is not None and self.pyp.data != "":
                pyp_main_folder = self.pyp.json_to_tree()
                print '(Folder have a *)'
                print '*root'
                view_folder(pyp_main_folder, 1)

        #Retrieve mode
        if args.get:
            #TODO: what to do if mulitple ids can match?
            pass

        #Interactive mode
        if args.interactive:
            try:
                ppi = PyPassInteractive(self.pyp, args.filename)
                ppi.cmdloop()
            except KeyboardInterrupt:
                ppi.do_quit(None)
                print ""


if __name__ == "__main__":
    PYP = pyp.PyPass()
    PYPC = PyPassCli(PYP)
